# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:55:51+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import UUID

from pydantic import BaseModel, ConfigDict, Field, RootModel, constr


class AppliedInventoriesParametersServicePlan(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    service_parameters: Optional[Dict[str, Any]] = Field(
        None,
        description='The provider specific parameters needed to compute list of used service inventories',
    )


class CollectionLinks(BaseModel):
    first: Optional[str] = None
    last: Optional[str] = None
    next: Optional[str] = None
    prev: Optional[str] = None


class CollectionMetadata(BaseModel):
    count: Optional[int] = None
    limit: Optional[int] = None
    offset: Optional[int] = None


class Error(BaseModel):
    detail: Optional[str] = Field(None, examples=['Record not found'])
    status: Optional[str] = Field(None, examples=['404'])


class ErrorNotFound(BaseModel):
    errors: Optional[List[Error]] = None


class GraphQLRequest(BaseModel):
    operationName: Optional[str] = Field(
        '',
        description='If the Query contains several named operations, the operationName controls which one should be executed',
    )
    query: str = Field(..., description='The GraphQL query')
    variables: Optional[Dict[str, Any]] = Field(
        None, description='Optional Query variables'
    )


class GraphQLResponse(BaseModel):
    data: Optional[Dict[str, Any]] = Field(
        None, description='Results from the GraphQL query'
    )
    errors: Optional[List[Dict[str, Any]]] = Field(
        None, description='Errors resulting from the GraphQL query'
    )


class ID(RootModel[constr(pattern=r'^\d+$')]):
    root: constr(pattern=r'^\d+$') = Field(..., description='ID of the resource')


class OrderParametersServiceOffering(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    provider_control_parameters: Optional[Dict[str, Any]] = Field(
        None,
        description='The provider specific parameters needed to provision this service. This might include namespaces, special keys',
    )
    service_parameters: Optional[Dict[str, Any]] = Field(
        None, description='JSON object with provisioning parameters'
    )
    service_plan_id: Optional[ID] = None


class OrderParametersServicePlan(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    provider_control_parameters: Optional[Dict[str, Any]] = Field(
        None,
        description='The provider specific parameters needed to provision this service. This might include namespaces, special keys',
    )
    service_parameters: Optional[Dict[str, Any]] = Field(
        None, description='JSON object with provisioning parameters'
    )


class ServiceCredential(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    archived_at: Optional[datetime] = None
    created_at: Optional[datetime] = None
    description: Optional[str] = None
    id: Optional[ID] = None
    last_seen_at: Optional[datetime] = None
    name: Optional[str] = None
    refresh_state_part_id: Optional[ID] = None
    service_credential_type_id: Optional[ID] = None
    source_created_at: Optional[datetime] = None
    source_id: Optional[ID] = None
    source_ref: Optional[str] = None
    source_updated_at: Optional[datetime] = None
    type_name: Optional[str] = None
    updated_at: Optional[datetime] = None


class ServiceCredentialType(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    archived_at: Optional[datetime] = None
    created_at: Optional[datetime] = None
    description: Optional[str] = None
    id: Optional[ID] = None
    kind: Optional[str] = None
    last_seen_at: Optional[datetime] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    refresh_state_part_id: Optional[ID] = None
    source_created_at: Optional[datetime] = None
    source_deleted_at: Optional[datetime] = None
    source_id: Optional[ID] = None
    source_ref: Optional[str] = None
    updated_at: Optional[datetime] = None


class ServiceCredentialTypesCollection(BaseModel):
    data: Optional[List[ServiceCredentialType]] = None
    links: Optional[CollectionLinks] = None
    meta: Optional[CollectionMetadata] = None


class ServiceCredentialsCollection(BaseModel):
    data: Optional[List[ServiceCredential]] = None
    links: Optional[CollectionLinks] = None
    meta: Optional[CollectionMetadata] = None


class ServiceInstance(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    archived_at: Optional[datetime] = None
    created_at: Optional[datetime] = None
    external_url: Optional[str] = None
    extra: Optional[Dict[str, Any]] = Field(
        None, description='Extra information about this object in JSON format'
    )
    id: Optional[ID] = None
    last_seen_at: Optional[datetime] = None
    name: Optional[str] = Field(None, examples=['Sample ServiceInstance'], title='Name')
    refresh_state_part_id: Optional[ID] = None
    root_service_instance_id: Optional[ID] = None
    service_inventory_id: Optional[ID] = None
    service_offering_id: Optional[ID] = None
    service_plan_id: Optional[ID] = None
    source_created_at: Optional[datetime] = None
    source_deleted_at: Optional[datetime] = None
    source_id: Optional[ID] = None
    source_ref: Optional[UUID] = None
    updated_at: Optional[datetime] = None


class ServiceInstanceNode(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    archived_at: Optional[datetime] = None
    created_at: Optional[datetime] = None
    extra: Optional[Dict[str, Any]] = None
    id: Optional[ID] = None
    last_seen_at: Optional[datetime] = None
    name: Optional[str] = None
    refresh_state_part_id: Optional[ID] = None
    root_service_instance_id: Optional[ID] = None
    service_instance_id: Optional[ID] = None
    service_inventory_id: Optional[ID] = None
    source_created_at: Optional[datetime] = None
    source_id: Optional[ID] = None
    source_ref: Optional[str] = None
    source_updated_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None


class ServiceInstanceNodesCollection(BaseModel):
    data: Optional[List[ServiceInstanceNode]] = None
    links: Optional[CollectionLinks] = None
    meta: Optional[CollectionMetadata] = None


class ServiceInstancesCollection(BaseModel):
    data: Optional[List[ServiceInstance]] = None
    links: Optional[CollectionLinks] = None
    meta: Optional[CollectionMetadata] = None


class ServiceInventory(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    archived_at: Optional[datetime] = None
    created_at: Optional[datetime] = None
    description: Optional[str] = None
    extra: Optional[Dict[str, Any]] = None
    id: Optional[ID] = None
    last_seen_at: Optional[datetime] = None
    name: Optional[str] = None
    refresh_state_part_id: Optional[ID] = None
    source_created_at: Optional[datetime] = None
    source_id: Optional[ID] = None
    source_ref: Optional[str] = None
    source_updated_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None


class ServiceOffering(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    archived_at: Optional[datetime] = None
    created_at: Optional[datetime] = None
    description: Optional[str] = Field(
        None, examples=['This is a short description'], title='Description'
    )
    display_name: Optional[str] = Field(
        None, examples=['MariaDB (Ephemeral)'], title='Display Name'
    )
    distributor: Optional[str] = Field(
        None, examples=['Red Hat, Inc.'], title='Distributor'
    )
    documentation_url: Optional[str] = Field(
        None,
        examples=[
            'https://github.com/sclorg/mariadb-container/blob/master/10.2/root/usr/share/container-scripts/mysql/README.md'
        ],
        title='Documentation URL',
    )
    extra: Optional[Dict[str, Any]] = Field(
        None, description='Extra information about this object in JSON format'
    )
    id: Optional[ID] = None
    last_seen_at: Optional[datetime] = None
    long_description: Optional[str] = Field(
        None,
        examples=[
            'This template provides a standalone MariaDB server with a database created...'
        ],
        title='Long Description',
    )
    name: Optional[str] = Field(
        None, examples=['Sample Service Offering'], title='Name'
    )
    refresh_state_part_id: Optional[ID] = None
    service_inventory_id: Optional[ID] = None
    source_created_at: Optional[datetime] = None
    source_deleted_at: Optional[datetime] = None
    source_id: Optional[ID] = None
    source_ref: Optional[str] = Field(
        None,
        description='The native reference used by the Source to refer to this object',
        examples=['object-12345_67890'],
        title='Source reference',
    )
    support_url: Optional[str] = Field(
        None, examples=['https://access.redhat.com'], title='Support URL'
    )
    updated_at: Optional[datetime] = None


class ServiceOfferingIcon(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    archived_at: Optional[datetime] = None
    created_at: Optional[datetime] = None
    data: Optional[str] = Field(None, description='Raw icon data', title='Icon Data')
    id: Optional[ID] = None
    last_seen_at: Optional[datetime] = None
    refresh_state_part_id: Optional[ID] = None
    source_id: Optional[ID] = None
    source_ref: Optional[str] = Field(None, examples=['icon-mariadb'])
    updated_at: Optional[datetime] = None


class ServiceOfferingIconsCollection(BaseModel):
    data: Optional[List[ServiceOfferingIcon]] = None
    links: Optional[CollectionLinks] = None
    meta: Optional[CollectionMetadata] = None


class ServiceOfferingNode(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    archived_at: Optional[datetime] = None
    created_at: Optional[datetime] = None
    extra: Optional[Dict[str, Any]] = None
    id: Optional[ID] = None
    last_seen_at: Optional[datetime] = None
    name: Optional[str] = None
    refresh_state_part_id: Optional[ID] = None
    root_service_offering_id: Optional[ID] = None
    service_inventory_id: Optional[ID] = None
    service_offering_id: Optional[ID] = None
    source_created_at: Optional[datetime] = None
    source_id: Optional[ID] = None
    source_ref: Optional[str] = None
    source_updated_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None


class ServiceOfferingNodesCollection(BaseModel):
    data: Optional[List[ServiceOfferingNode]] = None
    links: Optional[CollectionLinks] = None
    meta: Optional[CollectionMetadata] = None


class ServiceOfferingsCollection(BaseModel):
    data: Optional[List[ServiceOffering]] = None
    links: Optional[CollectionLinks] = None
    meta: Optional[CollectionMetadata] = None


class ServicePlan(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    archived_at: Optional[datetime] = None
    create_json_schema: Optional[Dict[str, Any]] = None
    created_at: Optional[datetime] = None
    description: Optional[str] = Field(
        None,
        examples=['This is a sample description for a provider'],
        title='Description',
    )
    extra: Optional[Dict[str, Any]] = Field(
        None, description='Extra information about this object in JSON format'
    )
    id: Optional[ID] = None
    last_seen_at: Optional[datetime] = None
    name: Optional[str] = Field(None, examples=['Sample Provider'], title='Name')
    refresh_state_part_id: Optional[ID] = None
    resource_version: Optional[str] = None
    service_offering_id: Optional[ID] = None
    source_created_at: Optional[datetime] = None
    source_deleted_at: Optional[datetime] = None
    source_id: Optional[ID] = None
    source_ref: Optional[UUID] = None
    update_json_schema: Optional[str] = None
    updated_at: Optional[datetime] = None


class ServicePlansCollection(BaseModel):
    data: Optional[List[ServicePlan]] = None
    links: Optional[CollectionLinks] = None
    meta: Optional[CollectionMetadata] = None


class Source(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    archived_at: Optional[datetime] = Field(None, title='Archived')
    availability_message: Optional[str] = Field(None, title='Availability Message')
    availability_status: Optional[str] = Field(
        None,
        examples=['The availability status of source'],
        title='Availability Status',
    )
    cloud_connector_id: Optional[str] = Field(
        None,
        examples=['The GUID of the RedHat connect client being used'],
        title='RedHat Connect Client Id',
    )
    created_at: Optional[datetime] = Field(None, title='Created')
    enabled: Optional[bool] = Field(False, title='Enabled')
    id: Optional[ID] = None
    info: Optional[Dict[str, Any]] = Field(
        None, examples=['The version of Tower being used'], title='Info'
    )
    last_available_at: Optional[datetime] = Field(None, title='Last available')
    last_checked_at: Optional[datetime] = Field(None, title='Last checked')
    last_refresh_message: Optional[str] = Field(None, title='Last refresh message')
    last_successful_refresh_at: Optional[datetime] = Field(
        None, title='Last successful refresh'
    )
    name: Optional[str] = Field(None, examples=['The Source Name'], title='Name')
    previous_sha: Optional[str] = Field(None, title='SHA of previous uploaded files')
    previous_size: Optional[int] = Field(None, title='Size of previous uploaded files')
    refresh_finished_at: Optional[datetime] = Field(None, title='Refresh finished')
    refresh_started_at: Optional[datetime] = Field(None, title='Refresh started')
    refresh_state: Optional[str] = Field(None, title='Refresh state')
    refresh_task_id: Optional[UUID] = Field(None, title='Refresh task')
    uid: Optional[str] = Field(
        None, title='Unique ID of the inventory source installation'
    )
    updated_at: Optional[datetime] = Field(None, title='Updated')


class SourcesCollection(BaseModel):
    data: Optional[List[Source]] = None
    links: Optional[CollectionLinks] = None
    meta: Optional[CollectionMetadata] = None


class Tag(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    tag: Optional[str] = Field(None, examples=['/namespace/architecture=x86_64'])


class TagsCollection(BaseModel):
    data: Optional[List[Tag]] = None
    links: Optional[CollectionLinks] = None
    meta: Optional[CollectionMetadata] = None


class State(Enum):
    pending = 'pending'
    queued = 'queued'
    running = 'running'
    timedout = 'timedout'
    completed = 'completed'


class Status(Enum):
    ok = 'ok'
    warn = 'warn'
    unchanged = 'unchanged'
    error = 'error'


class Tenant(BaseModel):
    description: Optional[str] = Field(None, examples=['Description of the Tenant'])
    external_tenant: Optional[str] = Field(
        None, examples=['External tenant identifier']
    )
    id: Optional[ID] = None
    name: Optional[str] = Field(None, examples=['Sample Tenant'])


class UUIDModel(RootModel[UUID]):
    root: UUID = Field(..., description='UUID of task')


class Filter(BaseModel):
    pass


class SortBy(BaseModel):
    pass


class ServiceInventoriesIdTagPostRequest(RootModel[List[Tag]]):
    root: List[Tag]


class ServiceInventoriesIdTagPostResponse(RootModel[List[Tag]]):
    root: List[Tag]


class ServiceInventoriesIdUntagPostRequest(RootModel[List[Tag]]):
    root: List[Tag]


class ServiceOfferingsIdAppliedInventoriesTagsPostResponse(RootModel[List[Tag]]):
    root: List[Tag]


class ServiceOfferingsIdOrderPostResponse(BaseModel):
    task_id: Optional[str] = None


class ServiceInventoriesCollection(BaseModel):
    data: Optional[List[ServiceInventory]] = None
    links: Optional[CollectionLinks] = None
    meta: Optional[CollectionMetadata] = None


class Task(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    archived_at: Optional[datetime] = None
    child_task_id: Optional[UUID] = None
    completed_at: Optional[datetime] = None
    controller_message_id: Optional[UUID] = None
    created_at: Optional[datetime] = None
    id: Optional[UUIDModel] = None
    input: Optional[Dict[str, Any]] = Field(
        None, examples=['Task payload input content'], title='Content'
    )
    message: Optional[str] = Field(
        None,
        examples=['received message starting inventory collection'],
        title='Message',
    )
    name: Optional[str] = Field(None, examples=['Order Service Plan'], title='Name')
    output: Optional[Dict[str, Any]] = Field(
        None, examples=['Result of Task Execution'], title='Result'
    )
    owner: Optional[str] = Field(None, examples=['jdoe'], title='Owner')
    source_id: Optional[ID] = None
    state: Optional[State] = Field(None, examples=['running'], title='State')
    status: Optional[Status] = Field(None, examples=['error'], title='Status')
    target_source_ref: Optional[str] = None
    target_type: Optional[str] = None
    type: Optional[str] = Field(None, examples=['CloudConnectorTask'], title='Type')
    updated_at: Optional[datetime] = None


class TasksCollection(BaseModel):
    data: Optional[List[Task]] = None
    links: Optional[CollectionLinks] = None
    meta: Optional[CollectionMetadata] = None


class TowingTask(RootModel[Task]):
    root: Task


class CheckAvailabilityTask(RootModel[Task]):
    root: Task


class FullRefreshPersisterTask(RootModel[Task]):
    root: Task


class FullRefreshUploadTask(RootModel[Task]):
    root: Task


class IncrementalRefreshUploadTask(RootModel[Task]):
    root: Task


class LaunchJobTask(RootModel[Task]):
    root: Task
